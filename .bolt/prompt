# ðŸ“¦ RunPod Backend Upgrade PDD

## Goal
Update the existing Medical RAG Vector Uploader backend to move BioBERT embedding and vectorization off of Render and into a scalable, GPU-backed service (e.g. RunPod). Supabase remains the source of truth for file and vector metadata.

---

## Step-by-Step Backend Architecture Update

### âœ… STEP 1: Replace Local Embedding with Remote API

**Before:**
- `rag.py` used `transformers` + `BioBERT` locally via `AutoTokenizer` and `AutoModel`
- Heavy memory and VRAM usage
- Fails on limited environments (e.g. Render free plan)

**After:**
- Remove `transformers`, `torch`, and `AutoModel` from local app
- Replace with `POST` request to RunPod container hosting embedding logic
- Add `REMOTE_EMBEDDING_URL` to `.env`

### âœ… STEP 2: Create Embedding Microservice on RunPod

**Before:**
- No separation of model and FastAPI app
- BioBERT pulled at server startup

**After:**
- Create container (or use notebook pod) with:
  - BioBERT model loading
  - `POST /embed` endpoint that accepts `{"text": "...", "metadata": {...}}`
  - Returns embedding vector

### âœ… STEP 3: Modify `embed_and_store()` Logic

**Before:**
- Embeddings generated directly using `BioBERT` locally

**After:**
- POST to RunPod
- Validate response
- Store returned vector in Supabase pgvector

### âœ… STEP 4: Update Dockerfile + requirements.txt

**Before:**
- Dockerfile includes `transformers`, `torch`, `BioBERT`

**After:**
- Remove heavy ML packages
- Add `httpx` or `requests`
- Reduce build time and size
- Confirm startup time under 10s (optional for Render)

### âœ… STEP 5: Secure API Traffic

**Before:**
- All embedding logic internal

**After:**
- Include optional `RUNPOD_EMBEDDING_KEY` in headers to authenticate backend-to-RunPod call

### âœ… STEP 6: (Optional) Build RAG Query Microservice

**Before:**
- Queries answered directly inside backend with agent logic and BioBERT

**After:**
- Use RunPod to also handle `/chat` or `/answer` with full context + agent logic if needed

---

## Notes

- You can keep frontend unchanged (calls backend at `/upload` and `/chat`)
- Supabase still stores files (via bucket) and vector embeddings (pgvector)
- Backend is now lightweight and cheap to run on Render