Remaining blockers
Symptom	Root cause	Where to fix
/api/chat → 404	Route was never wired for TxAgent (only /api/openai-chat).	backend/routes/chat.js (new POST /chat) + useChat.ts (switch on selected agent).
422 from TxAgent /chat	Backend sent { message:"hi" }; container expects { "query": "...", "top_k": …, "temperature": … }.	New TxAgent chat proxy (step 3) must forward the correct JSON.
Container marked “unreachable” during auto-status	checkContainerHealth() is hitting https://…/health without the trailing slash removal; RunPod proxy returns its own 404 page.	Strip trailing slashes once and use await axios.get(healthUrl.replace(/\/+$/,'')).
Vector dim 768 vs 1536 on OpenAI fallback	Docs are embedded with BioBERT (768). When OpenAI answers it embeds the query with ada-002 (1536) → pgvector throws.	For OpenAI path embed the query with the same dimension as the documents (call TxAgent /embed or switch both to ada-002).

One-shot patch set (bolt-friendly checklist)
Run these in order; each is incremental and can be committed separately.

1️⃣ Add TxAgent chat proxy route
File: backend/routes/chat.js

diff
Copy
+ // POST /chat  – proxy to the user’s TxAgent container
+ router.post('/chat', verifyToken, async (req,res)=>{
+   const { message, top_k = 5, temperature = 0.7 } = req.body || {};
+   if (!message || typeof message!=='string') {
+     return res.status(400).json({error:'Message is required'});
+   }
+
+   try {
+     // 1. find active agent session to get runpod_endpoint
+     const agent = await agentService.getActiveAgent(req.userId);
+     if (!agent?.session_data?.runpod_endpoint){
+       return res.status(503).json({error:'TxAgent not running'});
+     }
+
+     const chatUrl = `${agent.session_data.runpod_endpoint.replace(/\/+$/,'')}/chat`;
+
+     const { data } = await axios.post(
+       chatUrl,
+       { query: message, top_k, temperature },
+       { headers:{ Authorization:req.headers.authorization } }
+     );
+
+     return res.json(data);               // { response, sources, … }
+   } catch(err){
+     errorLogger.error('TxAgent chat failed', err);
+     return res.status(502).json({ error: err.message });
+   }
+ });
Mount: make sure setupRoutes(app) already mounts chatRouter at /api so the path becomes /api/chat.

2️⃣ Frontend switch
useChat.ts (or wherever you choose the agent):

ts
Copy
const endpoint = currentAgent==='TxAgent' ? '/api/chat' : '/api/openai-chat';
await apiCall(endpoint,{ method:'POST', body:{ message, top_k, temperature }});
3️⃣ Health-check tweak
AgentStatusOperations.checkContainerHealth

diff
Copy
const healthUrl = `${agent.session_data.runpod_endpoint}`.replace(/\/+$/,'') + '/health';
…and keep using axios (already migrated).

4️⃣ Keep embedding dimensions consistent
Quickest production fix: when the backend goes down the OpenAI path, reuse TxAgent’s embed endpoint to embed the query so you still get 768-d vectors:

js
Copy
if(selectedAgent==='OpenAI'){
   const { data: embed } = await axios.post(
        `${agent.session_data.runpod_endpoint.replace(/\/+$/,'')}/embed`,
        { text: query },
        { headers:{ Authorization:req.headers.authorization } }
   );
   // embed.embedding is 768-dim – safe for pgvector
}
(A longer-term alternative is to re-embed all documents with 1536-dim ada-002 and create a second ivfflat index.)

5️⃣ Test matrix after patch
Action	Expect
Monitor → Activate	/api/agent/start 200, /health 200, status running
Chat (TxAgent)	/api/chat 200, container logs show POST /chat 200
Chat (OpenAI)	Still works; no dimension mismatch error
Agent Monitor → Test Connection	health ✔ chat ✔ embed ✔
Browser Net tab	No 404/422 for /api/chat

Why these steps solve your current errors
404 disappears because /api/chat is now handled.

422 disappears because we send query, not message.

Unreachable goes green because the health URL is correct.

Vector dimension mismatch disappears by embedding with BioBERT in both directions.

Apply the checklist, redeploy the backend, and the chat balloon should finally get answers from BioBERT TxAgent.