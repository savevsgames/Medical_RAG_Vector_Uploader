# 🧠 Medical RAG Uploader – Product Design Document (PDD)

## 🏁 Goal
Build a scalable full-stack application that allows authenticated users to:
- Upload and embed medical documents (PDF/DOCX/TXT/MD)
- Extract text and generate embeddings with BioBERT
- Store the original files in Supabase Storage
- Store vector embeddings in a Supabase `pgvector`-enabled `documents` table
- Display and manage uploads through a secure, component-based frontend dashboard
- (Future) Query contextually via RAG-enabled `/chat`

## 📐 Architecture Overview
Frontend (React/Expo) → Backend (FastAPI Docker App) → Supabase (Auth + Storage + pgvector)

## 🧰 Tech Stack

| Layer         | Technology              |
|---------------|--------------------------|
| Frontend      | React + Tailwind (Vite or Next.js) |
| Backend API   | FastAPI (Python 3.10)    |
| Embedding     | BioBERT via HuggingFace Transformers |
| Vector Store  | Supabase `pgvector`      |
| Auth          | Supabase Auth (email/password) |
| Hosting       | Render (Docker backend), Vercel (frontend) |

---

## 📦 Backend Folder Structure
```
backend/
├── app/
│   ├── main.py
│   ├── embedder.py
│   ├── supabase_client.py
├── requirements.txt
├── Dockerfile
└── README.md
```

---

## 🖼 Frontend Folder Structure
```
frontend/
├── pages/
│   ├── index.tsx
│   ├── login.tsx
│   ├── signup.tsx
│   └── dashboard.tsx
├── components/
│   ├── UploadForm.tsx
│   ├── DocumentTable.tsx
│   └── ChatBox.tsx (future)
├── context/AuthProvider.tsx
└── lib/supabaseClient.ts
```

---

## 🗃 Supabase Schema (do NOT change existing table)

Schema remains:
- `documents (id UUID PK, filename TEXT, content TEXT, metadata JSONB, embedding VECTOR(768))`

To add per-user association, **add** this column:

```sql
ALTER TABLE documents ADD COLUMN user_id UUID;
```

And update policies accordingly:
- RLS: only allow access to rows where `documents.user_id = auth.uid()`
- Only allow insert/update if authenticated and `user_id = auth.uid()`

---

## 🔐 Auth Flow
- Supabase Auth manages user sign-up and login
- JWT token is sent to backend with file uploads
- Backend verifies token and includes `user_id` when writing to `documents`

---

## 🔌 API Endpoints
- `POST /upload`: uploads file, extracts text, embeds and stores vector
- `GET /docs`: returns user’s uploaded document list
- `GET /health`: for status checks
- (future) `POST /chat`: RAG query handler

---

## 🔍 Backend Requirements.txt Strategy
Avoid pip-only `git+https://...` installs.

Use pinned versions:
```
fastapi==0.110.0
uvicorn==0.28.0
pydantic==2.6.4
python-dotenv==1.0.1
transformers==4.40.1
torch==2.2.1
python-docx==1.1.0
PyMuPDF==1.23.21
supabase==1.0.3
```

---

## ✅ Deployment
- Docker backend to Render (mount secrets)
- Frontend to Vercel/Netlify
- Supabase stores embedding and raw files centrally