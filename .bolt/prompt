# ðŸ§  RAG Agent Initialization - PDD

## Purpose
Spin up and manage an intelligent retrieval agent that indexes user documents and responds to medical queries using vector search.

## Trigger
- User log in via frontend
- Triggers backend endpoint: `/api/agent/start`

## Workflow
1. Backend verifies JWT
2. Retrieves user ID
3. Loads previous embeddings from Supabase
4. Initializes FastAPI background task for agent loop
5. Agent listens on socket or API call

## Environment Variables Needed
- `SUPABASE_URL`
- `SUPABASE_KEY`
- `SUPABASE_BUCKET`
- `SUPABASE_JWT_SECRET`
- `OPENAI_API_KEY`
- `EMBEDDING_MODEL` (default: `dmis-lab/biobert-v1.1`)


# ðŸ“¤ PDD: User Uploads RAG Documents

## Trigger
User drops file into `FileUpload` React component.

## Frontend Steps
1. Validate file type/size
2. POST `/api/documents/upload` with file and JWT

## Backend Steps
1. Verify JWT, extract user ID
2. Extract file text
3. Generate embedding (BioBERT)
4. Store document in Supabase
5. Return success or failure


# ðŸ”„ RAG Agent Workflow

## Agent Loop
- Check for incoming queries
- Tokenize and embed query
- Search pgvector in Supabase
- Format top result chunks
- Call OpenAI with RAG context
- Optionally pass to ElevenLabs or Tavus for voice/video

## Steps
1. Receive query
2. Embed with BioBERT
3. Search: cosine similarity
4. Filter by threshold
5. Create prompt with context
6. Generate response
7. (Optional) Convert to voice/video


# ðŸš€ Auto-Spin Agent on Login

## Trigger
Frontend login successful â†’ JWT received

## Frontend
- POST to `/api/agent/initialize`

## Backend
1. Decode JWT â†’ Get user_id
2. Check for existing agent session
3. Spin up background task
4. Ready to accept queries

Use `uvicorn main:app --host 0.0.0.0 --port 8000` for container entrypoint